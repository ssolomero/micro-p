{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class WordleDirective {\n  constructor(el) {\n    this.color = '';\n    this.elementRef = el;\n  }\n  onInput(input) {\n    const length = input.value.length;\n    const maxLength = input.attributes.maxlength.value;\n    const nextElem = this.elementRef.nativeElement.nextSibling;\n    const currentElem = this.elementRef.nativeElement;\n    if (nextElem && nextElem.disabled != undefined && length >= maxLength) {\n      nextElem.disabled = false;\n      nextElem.focus();\n      currentElem.disabled = true;\n    }\n    currentElem.style.backgroundColor = this.color;\n  }\n}\nWordleDirective.ɵfac = function WordleDirective_Factory(t) {\n  return new (t || WordleDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nWordleDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: WordleDirective,\n  selectors: [[\"\", \"appWordleInput\", \"\"]],\n  hostBindings: function WordleDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function WordleDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event.target);\n      });\n    }\n  },\n  inputs: {\n    letterNum: \"letterNum\",\n    attemptNum: \"attemptNum\",\n    color: \"color\"\n  }\n});","map":{"version":3,"mappings":"AAAA,SAAyCA,UAAU,QAAQ,eAAe;;AAK1E,OAAM,MAAOC,eAAe;EAQ1BC,YAAYC,EAAc;IAJjB,UAAK,GAAG,EAAE;IAKjB,IAAI,CAACC,UAAU,GAAGD,EAAE;EACtB;EAE0CE,OAAO,CAACC,KAAS;IACzD,MAAMC,MAAM,GAAGD,KAAK,CAACE,KAAK,CAACD,MAAM;IACjC,MAAME,SAAS,GAAGH,KAAK,CAACI,UAAU,CAACC,SAAS,CAACH,KAAK;IAClD,MAAMI,QAAQ,GAAG,IAAI,CAACR,UAAU,CAACS,aAAa,CAACC,WAAW;IAC1D,MAAMC,WAAW,GAAG,IAAI,CAACX,UAAU,CAACS,aAAa;IAEjD,IAAID,QAAQ,IAAIA,QAAQ,CAACI,QAAQ,IAAIC,SAAS,IAAIV,MAAM,IAAIE,SAAS,EAAE;MACrEG,QAAQ,CAACI,QAAQ,GAAG,KAAK;MACzBJ,QAAQ,CAACM,KAAK,EAAE;MAChBH,WAAW,CAACC,QAAQ,GAAG,IAAI;;IAG7BD,WAAW,CAACI,KAAK,CAACC,eAAe,GAAG,IAAI,CAACC,KAAK;EAChD;;;mBAzBWpB,eAAe;AAAA;;QAAfA,eAAe;EAAAqB;EAAAC;IAAA;;eAAfC,0BAEV;MAAA","names":["ElementRef","WordleDirective","constructor","el","elementRef","onInput","input","length","value","maxLength","attributes","maxlength","nextElem","nativeElement","nextSibling","currentElem","disabled","undefined","focus","style","backgroundColor","color","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["/Users/sharence/Documents/angular/micro-p/micro-p/wordle/src/app/wordle/wordle.directive.ts"],"sourcesContent":["import { Directive, HostListener, Input, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appWordleInput]'\n})\nexport class WordleDirective {\n\n  @Input() letterNum!:any;\n  @Input() attemptNum!:any;\n  @Input() color = '';\n  \n  elementRef:any;\n\n  constructor(el: ElementRef) {\n    this.elementRef = el;\n  }\n\n  @HostListener('input', ['$event.target']) onInput(input:any) {\n    const length = input.value.length;\n    const maxLength = input.attributes.maxlength.value;\n    const nextElem = this.elementRef.nativeElement.nextSibling;\n    const currentElem = this.elementRef.nativeElement;\n    \n    if (nextElem && nextElem.disabled != undefined && length >= maxLength) {\n      nextElem.disabled = false;\n      nextElem.focus();\n      currentElem.disabled = true;\n    }\n\n    currentElem.style.backgroundColor = this.color;\n  }\n\n  // @HostListener('window:keyup', ['$event']) onDelete(event: KeyboardEvent) {\n  //   console.log(this.attemptNum, this.letterNum);\n  //   let currentElem = this.elementRef.nativeElement;\n  //   if (event.keyCode == 8) {\n  //     let attemptRow = document.getElementsByClassName(currentElem.className);\n  //     console.log(attemptRow);\n  //     // let prevElem;\n  //     // let currentElem = event.target as HTMLInputElement;\n  //     // console.log(currentElem.value);\n  //     // if (this.letterNum >= attemptRow.length-1 && currentElem.value != '') {\n  //     //   prevElem = attemptRow[this.letterNum] as HTMLInputElement;\n  //     // } else {\n  //     //   prevElem = attemptRow[this.letterNum-1] as HTMLInputElement;\n  //     // }\n  //     // prevElem.focus();\n  //   }\n  // }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}